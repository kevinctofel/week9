[{"/Users/kevinctofel/week9/week9/client/src/index.js":"1","/Users/kevinctofel/week9/week9/client/src/App.js":"2","/Users/kevinctofel/week9/week9/client/src/TodoList.js":"3","/Users/kevinctofel/week9/week9/client/src/TodoForm.js":"4","/Users/kevinctofel/week9/week9/client/src/Todo.js":"5"},{"size":225,"mtime":1618932506464,"results":"6","hashOfConfig":"7"},{"size":2306,"mtime":1619026995469,"results":"8","hashOfConfig":"7"},{"size":685,"mtime":1618932840532,"results":"9","hashOfConfig":"7"},{"size":1266,"mtime":1619027986293,"results":"10","hashOfConfig":"7"},{"size":3194,"mtime":1619027399127,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1et6l5d",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/kevinctofel/week9/week9/client/src/index.js",[],["25","26"],"/Users/kevinctofel/week9/week9/client/src/App.js",[],"/Users/kevinctofel/week9/week9/client/src/TodoList.js",[],"/Users/kevinctofel/week9/week9/client/src/TodoForm.js",["27"],"import {useState} from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport 'fontsource-roboto';\n\nfunction TodoForm({addTodo}) {\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [value, setValue] = useState(\"\");\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        // make sure input has a value\n        if (value === \"\") {\n            setErrorMessage(\"todo is empty\");\n            return;\n        } else {\n            // using function (addTodo) passed as a prop\n            addTodo(value);\n            // after adding clear input value\n            setValue(\"\");\n        }\n    }\n\n    const handleChange = (evt) => {\n        if (errorMessage) setErrorMessage(\"\");\n        setValue(evt.target.value);\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <TextField\n                    id=\"standard-basic\"\n                    type=\"text\"\n                    className=\"input\"\n                    value={value}\n                    onChange={handleChange}\n                />\n                <button variant=\"contained\" color=\"primary\">Add Todo</button>\n            </form>\n            <div className=\"error\">{errorMessage}</div>\n        </>\n    )\n}\n\nexport default TodoForm;","/Users/kevinctofel/week9/week9/client/src/Todo.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":2,"column":21,"nodeType":"36","messageId":"37","endLine":2,"endColumn":27},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar",["40"],["41"],"no-global-assign","no-unsafe-negation"]